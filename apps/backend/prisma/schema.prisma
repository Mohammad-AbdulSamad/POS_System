// Updated Schema:
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id             String          @id @default(uuid())
  name           String
  address        String?
  phone          String?
  createdAt      DateTime        @default(now())
  products       Product[]
  transactions   Transaction[]
  users          User[]
  categories     Category[]
  stockMovements StockMovement[]
}

model Product {
  id               String            @id @default(uuid())
  branchId         String
  branch           Branch            @relation(fields: [branchId], references: [id])
  sku              String // barcode, unique per branch
  name             String
  description      String?
  priceGross       Decimal           @db.Decimal(12, 2)
  cost             Decimal           @db.Decimal(12, 2)
  unit             String? // e.g., pcs, kg
  stock            Int               @default(0)
  categoryId       String?
  category         Category?         @relation(fields: [categoryId], references: [id])
  supplierId       String?
  supplier         Supplier?         @relation(fields: [supplierId], references: [id])
  taxRateId        String?
  taxRate          TaxRate?          @relation(fields: [taxRateId], references: [id])
  active           Boolean           @default(true)
  metadata         Json? // extensible store-specific fields
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  stockMovements   StockMovement[]
  transactionLines TransactionLine[]
  // Add to Product model
  minStock         Int?              @default(0)
  reorderPoint     Int?              @default(10)
  barcode          String? // separate from SKU
  imageUrl         String?
  // Just add these to your existing Product model:
  size             String? // "Small", "Medium", "Large", "330ml", "1L"
  weight           Decimal?          @db.Decimal(8, 3) // 0.330, 0.500, 1.500
  volume           Decimal?          @db.Decimal(8, 3) // for liquids
  packSize         Int? // 6, 12, 24 (for multipacks)

  promotions Promotion[] @relation("PromotionProducts")

  // compound index to ensure unique sku per branch
  @@unique([branchId, sku])
}

model Category {
  id         String      @id @default(uuid())
  name       String
  branchId   String
  branch     Branch      @relation(fields: [branchId], references: [id])
  products   Product[]
  promotions Promotion[] @relation("PromotionCategories")
}

model Supplier {
  id        String    @id @default(uuid())
  name      String
  phone     String?
  address   String?
  products  Product[]
  createdAt DateTime  @default(now())
}

model Customer {
  id           String        @id @default(uuid())
  name         String
  phone        String?       @unique
  email        String?       @unique
  createdAt    DateTime      @default(now())
  transactions Transaction[]

  // ðŸ†• NEW FIELDS - Added without breaking anything
  loyaltyNumber  String?     @unique
  loyaltyPoints  Int         @default(0)
  loyaltyTier    LoyaltyTier @default(BRONZE)
  dateOfBirth    DateTime?
  preferredStore String?

  // ðŸ†• NEW RELATIONSHIP
  loyaltyTransactions LoyaltyTransaction[]
}

// ðŸ†• NEW MODELS - Added without touching existing data
model LoyaltyTransaction {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  points     Int // points earned/redeemed
  type       String // "EARNED" or "REDEEMED"  
  reason     String // "PURCHASE", "BIRTHDAY", "PROMOTION"
  createdAt  DateTime @default(now())
}

model Transaction {
  id             String            @id @default(uuid())
  branchId       String
  branch         Branch            @relation(fields: [branchId], references: [id])
  cashierId      String?
  cashier        User?             @relation("UserTransactions", fields: [cashierId], references: [id]) // ðŸ‘ˆ add relation name
  customerId     String?
  customer       Customer?         @relation(fields: [customerId], references: [id])
  totalGross     Decimal           @db.Decimal(12, 2)
  totalTax       Decimal           @db.Decimal(12, 2)
  totalNet       Decimal           @db.Decimal(12, 2)
  createdAt      DateTime          @default(now())
  lines          TransactionLine[]
  payments       Payment[]
  metadata       Json?
  // Add to Transaction model  
  receiptNumber  String            @unique
  status         TransactionStatus @default(COMPLETED)
  refundedAmount Decimal?          @default(0) @db.Decimal(12, 2)

  // ðŸ†• NEW OPTIONAL FIELDS
  loyaltyPointsEarned Int?     @default(0)
  loyaltyPointsUsed   Int?     @default(0)
  returns             Return[]
}

model TransactionLine {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  unitPrice     Decimal     @db.Decimal(12, 2)
  qty           Int
  discount      Decimal     @default(0) @db.Decimal(12, 2)
  taxAmount     Decimal     @default(0) @db.Decimal(12, 2)
  lineTotal     Decimal     @db.Decimal(12, 2)
}

model Payment {
  id            String        @id @default(uuid())
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  method        PaymentMethod
  amount        Decimal       @db.Decimal(12, 2)
  createdAt     DateTime      @default(now())
}

model StockMovement {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  change    Int // +10 = received, -2 = sold, -1 = spoilage
  reason    String // "sale", "purchase", "adjustment", "transfer"
  createdAt DateTime @default(now())
}

model TaxRate {
  id       String    @id @default(uuid())
  name     String
  rate     Decimal   @db.Decimal(5, 2) // e.g. 15.00 = 15%
  products Product[]
}

model Promotion {
  id          String        @id @default(uuid())
  name        String
  description String?
  type        PromotionType @default(PERCENTAGE) // NEW: type of promotion
  discountPct Decimal?      @db.Decimal(5, 2) // % discount (if applicable)
  discountAmt Decimal?      @db.Decimal(10, 2) // fixed amount off (if applicable)
  buyQty      Int? // for Buy X Get Y
  getQty      Int? // for Buy X Get Y
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())

  // Relations
  // Relations
  products   Product[]  @relation("PromotionProducts")
  categories Category[] @relation("PromotionCategories")
}

enum PromotionType {
  PERCENTAGE // e.g., 10% off
  FIXED_AMOUNT // e.g., 5.00 off
  BUY_X_GET_Y // e.g., Buy 2 Get 1 Free
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([expiresAt])
}


model User {
  id           String        @id @default(uuid())
  branchId     String?
  branch       Branch?       @relation(fields: [branchId], references: [id])
  email        String        @unique
  name         String?
  password     String // bcrypt hash
  phone        String?
  role         Role          @default(CASHIER)
  createdAt    DateTime      @default(now())
  transactions Transaction[] @relation("UserTransactions")
   refreshTokens RefreshToken[]
}

model Return {
  id                    String      @id @default(uuid())
  originalTransactionId String
  originalTransaction   Transaction @relation(fields: [originalTransactionId], references: [id])
  returnAmount          Decimal     @db.Decimal(12, 2)
  reason                String?
  processedBy           String?
  createdAt             DateTime    @default(now())
}

enum Role {
  ADMIN
  MANAGER
  CASHIER
  STOCK_MANAGER
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE
}

// New enums
enum TransactionStatus {
  PENDING
  COMPLETED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}
