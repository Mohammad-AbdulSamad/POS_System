
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phone: 'phone',
  createdAt: 'createdAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  sku: 'sku',
  name: 'name',
  description: 'description',
  priceGross: 'priceGross',
  cost: 'cost',
  unit: 'unit',
  stock: 'stock',
  categoryId: 'categoryId',
  supplierId: 'supplierId',
  taxRateId: 'taxRateId',
  active: 'active',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  minStock: 'minStock',
  reorderPoint: 'reorderPoint',
  barcode: 'barcode',
  imageUrl: 'imageUrl',
  size: 'size',
  weight: 'weight',
  volume: 'volume',
  packSize: 'packSize'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  branchId: 'branchId'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  address: 'address',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  email: 'email',
  createdAt: 'createdAt',
  loyaltyNumber: 'loyaltyNumber',
  loyaltyPoints: 'loyaltyPoints',
  loyaltyTier: 'loyaltyTier',
  dateOfBirth: 'dateOfBirth',
  preferredStore: 'preferredStore'
};

exports.Prisma.LoyaltyTransactionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  points: 'points',
  type: 'type',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  cashierId: 'cashierId',
  customerId: 'customerId',
  totalGross: 'totalGross',
  totalTax: 'totalTax',
  totalNet: 'totalNet',
  createdAt: 'createdAt',
  metadata: 'metadata',
  receiptNumber: 'receiptNumber',
  status: 'status',
  refundedAmount: 'refundedAmount',
  loyaltyPointsEarned: 'loyaltyPointsEarned',
  loyaltyPointsUsed: 'loyaltyPointsUsed'
};

exports.Prisma.TransactionLineScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  productId: 'productId',
  unitPrice: 'unitPrice',
  qty: 'qty',
  discount: 'discount',
  taxAmount: 'taxAmount',
  lineTotal: 'lineTotal'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  method: 'method',
  amount: 'amount',
  createdAt: 'createdAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  branchId: 'branchId',
  change: 'change',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.TaxRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rate: 'rate'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  discountPct: 'discountPct',
  discountAmt: 'discountAmt',
  buyQty: 'buyQty',
  getQty: 'getQty',
  active: 'active',
  createdAt: 'createdAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.TokenBlacklistScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  email: 'email',
  name: 'name',
  password: 'password',
  phone: 'phone',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.ReturnScalarFieldEnum = {
  id: 'id',
  originalTransactionId: 'originalTransactionId',
  returnAmount: 'returnAmount',
  reason: 'reason',
  processedBy: 'processedBy',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PromotionType = exports.$Enums.PromotionType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  BUY_X_GET_Y: 'BUY_X_GET_Y'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  CASHIER: 'CASHIER',
  STOCK_MANAGER: 'STOCK_MANAGER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  MOBILE: 'MOBILE'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  REFUNDED: 'REFUNDED',
  PARTIALLY_REFUNDED: 'PARTIALLY_REFUNDED'
};

exports.LoyaltyTier = exports.$Enums.LoyaltyTier = {
  BRONZE: 'BRONZE',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.Prisma.ModelName = {
  Branch: 'Branch',
  Product: 'Product',
  Category: 'Category',
  Supplier: 'Supplier',
  Customer: 'Customer',
  LoyaltyTransaction: 'LoyaltyTransaction',
  Transaction: 'Transaction',
  TransactionLine: 'TransactionLine',
  Payment: 'Payment',
  StockMovement: 'StockMovement',
  TaxRate: 'TaxRate',
  Promotion: 'Promotion',
  RefreshToken: 'RefreshToken',
  TokenBlacklist: 'TokenBlacklist',
  User: 'User',
  Return: 'Return'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\Mohammad\\Desktop\\pos-system\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\Mohammad\\Desktop\\pos-system\\apps\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../apps/backend/.env"
  },
  "relativePath": "../../../apps/backend/prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// Updated Schema:\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Branch {\n  id             String          @id @default(uuid())\n  name           String\n  address        String?\n  phone          String?\n  createdAt      DateTime        @default(now())\n  products       Product[]\n  transactions   Transaction[]\n  users          User[]\n  categories     Category[]\n  stockMovements StockMovement[]\n}\n\nmodel Product {\n  id               String            @id @default(uuid())\n  branchId         String\n  branch           Branch            @relation(fields: [branchId], references: [id])\n  sku              String // barcode, unique per branch\n  name             String\n  description      String?\n  priceGross       Decimal           @db.Decimal(12, 2)\n  cost             Decimal           @db.Decimal(12, 2)\n  unit             String? // e.g., pcs, kg\n  stock            Int               @default(0)\n  categoryId       String?\n  category         Category?         @relation(fields: [categoryId], references: [id])\n  supplierId       String?\n  supplier         Supplier?         @relation(fields: [supplierId], references: [id])\n  taxRateId        String?\n  taxRate          TaxRate?          @relation(fields: [taxRateId], references: [id])\n  active           Boolean           @default(true)\n  metadata         Json? // extensible store-specific fields\n  createdAt        DateTime          @default(now())\n  updatedAt        DateTime          @updatedAt\n  stockMovements   StockMovement[]\n  transactionLines TransactionLine[]\n  // Add to Product model\n  minStock         Int?              @default(0)\n  reorderPoint     Int?              @default(10)\n  barcode          String? // separate from SKU\n  imageUrl         String?\n  // Just add these to your existing Product model:\n  size             String? // \"Small\", \"Medium\", \"Large\", \"330ml\", \"1L\"\n  weight           Decimal?          @db.Decimal(8, 3) // 0.330, 0.500, 1.500\n  volume           Decimal?          @db.Decimal(8, 3) // for liquids\n  packSize         Int? // 6, 12, 24 (for multipacks)\n\n  promotions Promotion[] @relation(\"PromotionProducts\")\n\n  // compound index to ensure unique sku per branch\n  @@unique([branchId, sku])\n}\n\nmodel Category {\n  id         String      @id @default(uuid())\n  name       String\n  branchId   String\n  branch     Branch      @relation(fields: [branchId], references: [id])\n  products   Product[]\n  promotions Promotion[] @relation(\"PromotionCategories\")\n}\n\nmodel Supplier {\n  id        String    @id @default(uuid())\n  name      String\n  phone     String?\n  address   String?\n  products  Product[]\n  createdAt DateTime  @default(now())\n}\n\nmodel Customer {\n  id           String        @id @default(uuid())\n  name         String\n  phone        String?       @unique\n  email        String?       @unique\n  createdAt    DateTime      @default(now())\n  transactions Transaction[]\n\n  // 🆕 NEW FIELDS - Added without breaking anything\n  loyaltyNumber  String?     @unique\n  loyaltyPoints  Int         @default(0)\n  loyaltyTier    LoyaltyTier @default(BRONZE)\n  dateOfBirth    DateTime?\n  preferredStore String?\n\n  // 🆕 NEW RELATIONSHIP\n  loyaltyTransactions LoyaltyTransaction[]\n}\n\n// 🆕 NEW MODELS - Added without touching existing data\nmodel LoyaltyTransaction {\n  id         String   @id @default(uuid())\n  customerId String\n  customer   Customer @relation(fields: [customerId], references: [id])\n  points     Int // points earned/redeemed\n  type       String // \"EARNED\" or \"REDEEMED\"  \n  reason     String // \"PURCHASE\", \"BIRTHDAY\", \"PROMOTION\"\n  createdAt  DateTime @default(now())\n}\n\nmodel Transaction {\n  id             String            @id @default(uuid())\n  branchId       String\n  branch         Branch            @relation(fields: [branchId], references: [id])\n  cashierId      String?\n  cashier        User?             @relation(\"UserTransactions\", fields: [cashierId], references: [id]) // 👈 add relation name\n  customerId     String?\n  customer       Customer?         @relation(fields: [customerId], references: [id])\n  totalGross     Decimal           @db.Decimal(12, 2)\n  totalTax       Decimal           @db.Decimal(12, 2)\n  totalNet       Decimal           @db.Decimal(12, 2)\n  createdAt      DateTime          @default(now())\n  lines          TransactionLine[]\n  payments       Payment[]\n  metadata       Json?\n  // Add to Transaction model  \n  receiptNumber  String            @unique\n  status         TransactionStatus @default(COMPLETED)\n  refundedAmount Decimal?          @default(0) @db.Decimal(12, 2)\n\n  // 🆕 NEW OPTIONAL FIELDS\n  loyaltyPointsEarned Int?     @default(0)\n  loyaltyPointsUsed   Int?     @default(0)\n  returns             Return[]\n}\n\nmodel TransactionLine {\n  id            String      @id @default(uuid())\n  transactionId String\n  transaction   Transaction @relation(fields: [transactionId], references: [id])\n  productId     String\n  product       Product     @relation(fields: [productId], references: [id])\n  unitPrice     Decimal     @db.Decimal(12, 2)\n  qty           Int\n  discount      Decimal     @default(0) @db.Decimal(12, 2)\n  taxAmount     Decimal     @default(0) @db.Decimal(12, 2)\n  lineTotal     Decimal     @db.Decimal(12, 2)\n}\n\nmodel Payment {\n  id            String        @id @default(uuid())\n  transactionId String\n  transaction   Transaction   @relation(fields: [transactionId], references: [id])\n  method        PaymentMethod\n  amount        Decimal       @db.Decimal(12, 2)\n  createdAt     DateTime      @default(now())\n}\n\nmodel StockMovement {\n  id        String   @id @default(uuid())\n  productId String\n  product   Product  @relation(fields: [productId], references: [id])\n  branchId  String\n  branch    Branch   @relation(fields: [branchId], references: [id])\n  change    Int // +10 = received, -2 = sold, -1 = spoilage\n  reason    String // \"sale\", \"purchase\", \"adjustment\", \"transfer\"\n  createdAt DateTime @default(now())\n}\n\nmodel TaxRate {\n  id       String    @id @default(uuid())\n  name     String\n  rate     Decimal   @db.Decimal(5, 2) // e.g. 15.00 = 15%\n  products Product[]\n}\n\nmodel Promotion {\n  id          String        @id @default(uuid())\n  name        String\n  description String?\n  type        PromotionType @default(PERCENTAGE) // NEW: type of promotion\n  discountPct Decimal?      @db.Decimal(5, 2) // % discount (if applicable)\n  discountAmt Decimal?      @db.Decimal(10, 2) // fixed amount off (if applicable)\n  buyQty      Int? // for Buy X Get Y\n  getQty      Int? // for Buy X Get Y\n  active      Boolean       @default(true)\n  createdAt   DateTime      @default(now())\n\n  // Relations\n  // Relations\n  products   Product[]  @relation(\"PromotionProducts\")\n  categories Category[] @relation(\"PromotionCategories\")\n}\n\nenum PromotionType {\n  PERCENTAGE // e.g., 10% off\n  FIXED_AMOUNT // e.g., 5.00 off\n  BUY_X_GET_Y // e.g., Buy 2 Get 1 Free\n}\n\nmodel RefreshToken {\n  id        String   @id @default(uuid())\n  token     String   @unique\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([expiresAt])\n}\n\nmodel TokenBlacklist {\n  id        String   @id @default(uuid())\n  token     String   @unique\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([expiresAt])\n}\n\nmodel User {\n  id            String         @id @default(uuid())\n  branchId      String?\n  branch        Branch?        @relation(fields: [branchId], references: [id])\n  email         String         @unique\n  name          String?\n  password      String // bcrypt hash\n  phone         String?\n  role          Role           @default(CASHIER)\n  createdAt     DateTime       @default(now())\n  transactions  Transaction[]  @relation(\"UserTransactions\")\n  refreshTokens RefreshToken[]\n}\n\nmodel Return {\n  id                    String      @id @default(uuid())\n  originalTransactionId String\n  originalTransaction   Transaction @relation(fields: [originalTransactionId], references: [id])\n  returnAmount          Decimal     @db.Decimal(12, 2)\n  reason                String?\n  processedBy           String?\n  createdAt             DateTime    @default(now())\n}\n\nenum Role {\n  ADMIN\n  MANAGER\n  CASHIER\n  STOCK_MANAGER\n}\n\nenum PaymentMethod {\n  CASH\n  CARD\n  MOBILE\n}\n\n// New enums\nenum TransactionStatus {\n  PENDING\n  COMPLETED\n  REFUNDED\n  PARTIALLY_REFUNDED\n}\n\nenum LoyaltyTier {\n  BRONZE\n  SILVER\n  GOLD\n  PLATINUM\n}\n",
  "inlineSchemaHash": "c9b14ca6c731f9a83b322818c1b973c7272420b29357e3ce7e639dceea43abb1",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Branch\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"BranchToProduct\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"BranchToTransaction\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BranchToUser\"},{\"name\":\"categories\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"BranchToCategory\"},{\"name\":\"stockMovements\",\"kind\":\"object\",\"type\":\"StockMovement\",\"relationName\":\"BranchToStockMovement\"}],\"dbName\":null},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branch\",\"kind\":\"object\",\"type\":\"Branch\",\"relationName\":\"BranchToProduct\"},{\"name\":\"sku\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priceGross\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"cost\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"unit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stock\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"CategoryToProduct\"},{\"name\":\"supplierId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"supplier\",\"kind\":\"object\",\"type\":\"Supplier\",\"relationName\":\"ProductToSupplier\"},{\"name\":\"taxRateId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"taxRate\",\"kind\":\"object\",\"type\":\"TaxRate\",\"relationName\":\"ProductToTaxRate\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"stockMovements\",\"kind\":\"object\",\"type\":\"StockMovement\",\"relationName\":\"ProductToStockMovement\"},{\"name\":\"transactionLines\",\"kind\":\"object\",\"type\":\"TransactionLine\",\"relationName\":\"ProductToTransactionLine\"},{\"name\":\"minStock\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reorderPoint\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"barcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"volume\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"packSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"promotions\",\"kind\":\"object\",\"type\":\"Promotion\",\"relationName\":\"PromotionProducts\"}],\"dbName\":null},\"Category\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branch\",\"kind\":\"object\",\"type\":\"Branch\",\"relationName\":\"BranchToCategory\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"CategoryToProduct\"},{\"name\":\"promotions\",\"kind\":\"object\",\"type\":\"Promotion\",\"relationName\":\"PromotionCategories\"}],\"dbName\":null},\"Supplier\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToSupplier\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Customer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"CustomerToTransaction\"},{\"name\":\"loyaltyNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"loyaltyPoints\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"loyaltyTier\",\"kind\":\"enum\",\"type\":\"LoyaltyTier\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"preferredStore\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"loyaltyTransactions\",\"kind\":\"object\",\"type\":\"LoyaltyTransaction\",\"relationName\":\"CustomerToLoyaltyTransaction\"}],\"dbName\":null},\"LoyaltyTransaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerToLoyaltyTransaction\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branch\",\"kind\":\"object\",\"type\":\"Branch\",\"relationName\":\"BranchToTransaction\"},{\"name\":\"cashierId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cashier\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTransactions\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customer\",\"kind\":\"object\",\"type\":\"Customer\",\"relationName\":\"CustomerToTransaction\"},{\"name\":\"totalGross\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"totalTax\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"totalNet\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lines\",\"kind\":\"object\",\"type\":\"TransactionLine\",\"relationName\":\"TransactionToTransactionLine\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToTransaction\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"receiptNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"TransactionStatus\"},{\"name\":\"refundedAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"loyaltyPointsEarned\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"loyaltyPointsUsed\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"returns\",\"kind\":\"object\",\"type\":\"Return\",\"relationName\":\"ReturnToTransaction\"}],\"dbName\":null},\"TransactionLine\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"TransactionToTransactionLine\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToTransactionLine\"},{\"name\":\"unitPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"qty\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"discount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"taxAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"lineTotal\",\"kind\":\"scalar\",\"type\":\"Decimal\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"PaymentToTransaction\"},{\"name\":\"method\",\"kind\":\"enum\",\"type\":\"PaymentMethod\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"StockMovement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToStockMovement\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branch\",\"kind\":\"object\",\"type\":\"Branch\",\"relationName\":\"BranchToStockMovement\"},{\"name\":\"change\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TaxRate\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rate\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"ProductToTaxRate\"}],\"dbName\":null},\"Promotion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"PromotionType\"},{\"name\":\"discountPct\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"discountAmt\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"buyQty\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"getQty\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"products\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"PromotionProducts\"},{\"name\":\"categories\",\"kind\":\"object\",\"type\":\"Category\",\"relationName\":\"PromotionCategories\"}],\"dbName\":null},\"RefreshToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"RefreshTokenToUser\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TokenBlacklist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branch\",\"kind\":\"object\",\"type\":\"Branch\",\"relationName\":\"BranchToUser\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"UserTransactions\"},{\"name\":\"refreshTokens\",\"kind\":\"object\",\"type\":\"RefreshToken\",\"relationName\":\"RefreshTokenToUser\"}],\"dbName\":null},\"Return\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"originalTransactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"originalTransaction\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ReturnToTransaction\"},{\"name\":\"returnAmount\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"reason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"processedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

